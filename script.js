// ====== Êï∞ÊçÆÂÆö‰πâÔºà‰∏éÂâçÁâàÊú¨‰∏ÄËá¥ÔºåÁúÅÁï•ÈÉ®ÂàÜÁõ∏ÂêåÁªìÊûÑÔºâ ======
const races = [
  { name: "‰∫∫Á±ª", bonus: { ÂäõÈáè:1, ÊïèÊç∑:1, ‰ΩìË¥®:1, Êô∫Âäõ:1, ÊÑüÁü•:1, È≠ÖÂäõ:1 }, desc: "Â§öÊâçÂ§öËâ∫ÔºåÊâÄÊúâÂ±ûÊÄß+1„ÄÇ" },
  { name: "ÁüÆ‰∫∫", bonus: { ‰ΩìË¥®:2 }, desc: "ÂùöÈüßÁ®≥ÈáçÔºå‰ΩìË¥®+2„ÄÇ" },
  { name: "Á≤æÁÅµ", bonus: { ÊïèÊç∑:2 }, desc: "‰ºòÈõÖÁÅµÊïèÔºåÊïèÊç∑+2„ÄÇ" },
  { name: "ÂçäË∫´‰∫∫", bonus: { ÊïèÊç∑:2 }, desc: "Â∞èÂ∑ßÁÅµÂä®ÔºåÊïèÊç∑+2„ÄÇ" },
  { name: "ÈæôË£î", bonus: { ÂäõÈáè:2, È≠ÖÂäõ:1 }, desc: "Èæô‰πãË°ÄËÑâÔºåÂäõÈáè+2ÔºåÈ≠ÖÂäõ+1„ÄÇ" },
  { name: "‰æèÂÑí", bonus: { Êô∫Âäõ:2 }, desc: "ËÅ™ÊòéÁã°Èª†ÔºåÊô∫Âäõ+2„ÄÇ" },
  { name: "ÂçäÁ≤æÁÅµ", bonus: { È≠ÖÂäõ:2, ÊïèÊç∑:1, Êô∫Âäõ:1 }, desc: "Ê∑∑Ë°ÄÂ§öÊâçÔºåÈ≠ÖÂäõ+2ÔºåÂè¶‰∏§È°π+1„ÄÇ" },
  { name: "ÂçäÂÖΩ‰∫∫", bonus: { ÂäõÈáè:2, ‰ΩìË¥®:1 }, desc: "ÈáéÊÄß‰∏éÂäõÈáèÂπ∂Â≠òÔºåÂäõÈáè+2Ôºå‰ΩìË¥®+1„ÄÇ" },
  { name: "Ê≥∞Â§´Êûó", bonus: { Êô∫Âäõ:1, È≠ÖÂäõ:2 }, desc: "ÊÅ∂È≠îË°ÄË£îÔºåÊô∫Âäõ+1ÔºåÈ≠ÖÂäõ+2„ÄÇ" }
];

const classes = [
  { name: "ÈáéËõÆ‰∫∫", main: "ÂäõÈáè„ÄÅ‰ΩìË¥®", desc: "ÊìÖÈïøËøëÊàòÁãÇÊÄí‰∏éÊäóÊÄß„ÄÇ" },
  { name: "ÂêüÊ∏∏ËØó‰∫∫", main: "È≠ÖÂäõ", desc: "Áî®Èü≥‰πê‰∏éÈ≠îÊ≥ïÊøÄÂä±ÈòüÂèã„ÄÇ" },
  { name: "ÁâßÂ∏à", main: "ÊÑüÁü•", desc: "Á•ûÂú£ÊñΩÊ≥ïËÄÖÔºåÊ≤ªÁñó‰∏éÂÆàÊä§„ÄÇ" },
  { name: "Âæ∑È≤Å‰ºä", main: "ÊÑüÁü•", desc: "Ëá™ÁÑ∂ÊñΩÊ≥ï‰∏éÂèòÂΩ¢„ÄÇ" },
  { name: "ÊàòÂ£´", main: "ÂäõÈáèÊàñÊïèÊç∑", desc: "Â§öÈù¢ÊâãÔºåÊìÖÈïøÂêÑÁßçÊàòÊñóÈ£éÊ†º„ÄÇ" },
  { name: "Ê≠¶ÂÉß", main: "ÊïèÊç∑„ÄÅÊÑüÁü•", desc: "Ê≠¶ÊúØÂÆ∂ÔºåÊ≥®ÈáçÂèçÂ∫î‰∏é‰∏ìÊ≥®„ÄÇ" },
  { name: "Âú£È™ëÂ£´", main: "ÂäõÈáè„ÄÅÈ≠ÖÂäõ", desc: "Ê≠£‰πâÁöÑÊàòÂ£´ÔºåÂÖ∑Á•ûÂú£È≠îÊ≥ï„ÄÇ" },
  { name: "Ê∏∏‰æ†", main: "ÊïèÊç∑„ÄÅÊÑüÁü•", desc: "ËçíÈáéÁåé‰∫∫ÔºåÁ≤æÈÄöÂºì‰∏éÈ≠îÊ≥ï„ÄÇ" },
  { name: "ÁõóË¥º", main: "ÊïèÊç∑", desc: "ÊΩúË°å‰∏éÁ≤æÂáÜÊâìÂáªÁöÑ‰∏ìÂÆ∂„ÄÇ" },
  { name: "ÊúØÂ£´", main: "È≠ÖÂäõ", desc: "Â§©ÁîüÈ≠îÊ≥ïÂäõÈáèÔºå‰æùËµñÈ≠ÖÂäõ„ÄÇ" },
  { name: "Â•ëÊúØÂ£´", main: "È≠ÖÂäõ", desc: "‰∏éÂºÇÁïåÂ≠òÂú®Á´ãÂ•ëÁ∫¶ÁöÑÊñΩÊ≥ïËÄÖ„ÄÇ" },
  { name: "Ê≥ïÂ∏à", main: "Êô∫Âäõ", desc: "ÂçöÂ≠¶ÁöÑÊñΩÊ≥ïÂ§ßÂ∏à„ÄÇ" },
  { name: "Â∑•Âå†", main: "Êô∫Âäõ", desc: "È≠îÂØºÁßëÊäÄ‰∏ìÂÆ∂„ÄÇ" }
];

const backgrounds = [
  { name: "Â£´ÂÖµ", desc: "Á∫™Âæã‰∏•ÊòéÔºåÊìÖÈïøÊ≠¶Âô®‰∏éÊåáÊå•„ÄÇ" },
  { name: "Ë¥µÊóè", desc: "Âá∫ÁîüÊòæËµ´ÔºåÊìÖÈïøÁ§º‰ª™‰∏éÁ§æ‰∫§„ÄÇ" },
  { name: "Â≠¶ËÄÖ", desc: "Áü•ËØÜÊ∏äÂçöÔºåÊìÖÈïøË∞ÉÊü•‰∏éÁ†îÁ©∂„ÄÇ" },
  { name: "ÁΩ™ÁäØ", desc: "ÊΩúË°å‰∏éÈò¥ÂΩ±ÁöÑÁÜü‰∫∫„ÄÇ" },
  { name: "ÊµÅÊµ™ÂÑø", desc: "Ë°óÂ§¥Ê±ÇÁîüËÄÖÔºåÊìÖÈïøÊΩúË°å‰∏éÂØüËßâ„ÄÇ" },
];

// ====== ÂÖ®Â±ÄÂèòÈáè ======
let character = {};
let selectedButton = null;
let eventTimer = null;
let currentEvent = null;

// ====== Âü∫Á°ÄÈÄªËæëÔºàÁîüÊàêÂ±ûÊÄß„ÄÅÈÄâÊã©Á≠âÔºâ ======
function rollStat() {
  const rolls = Array.from({ length: 4 }, () => Math.floor(Math.random() * 6) + 1);
  rolls.sort((a, b) => b - a);
  return rolls[0] + rolls[1] + rolls[2];
}

function generateStats() {
  const optionsDiv = document.getElementById("stat-options");
  optionsDiv.innerHTML = "";
  for (let i = 0; i < 5; i++) {
    const stats = {
      ÂäõÈáè: rollStat(),
      ÊïèÊç∑: rollStat(),
      ‰ΩìË¥®: rollStat(),
      Êô∫Âäõ: rollStat(),
      ÊÑüÁü•: rollStat(),
      È≠ÖÂäõ: rollStat()
    };
    const btn = document.createElement("button");
    btn.textContent = Object.entries(stats).map(([k,v]) => `${k}:${v}`).join(", ");
    btn.onclick = () => selectStats(stats, btn);
    optionsDiv.appendChild(btn);
  }

  document.getElementById("selected-stats").textContent = "Â∞öÊú™ÈÄâÊã©Â±ûÊÄßÁªÑ„ÄÇ";
  if (selectedButton) {
    selectedButton.classList.remove("selected");
    selectedButton = null;
  }
}

function selectStats(stats, button) {
  character.stats = stats;
  if (selectedButton) selectedButton.classList.remove("selected");
  selectedButton = button;
  selectedButton.classList.add("selected");
  document.getElementById("selected-stats").textContent =
    `‚úÖ ÂΩìÂâçÂ∑≤ÈÄâÊã©Â±ûÊÄßÁªÑÔºö${Object.entries(stats).map(([k,v]) => `${k}:${v}`).join(", ")}`;
}

function initSelectors() {
  const makeOptions = (select, list) => {
    select.innerHTML = "";
    list.forEach(i => {
      const opt = document.createElement("option");
      opt.value = i.name;
      opt.textContent = i.name;
      select.appendChild(opt);
    });
  };

  makeOptions(document.getElementById("race-select"), races);
  makeOptions(document.getElementById("class-select"), classes);
  makeOptions(document.getElementById("background-select"), backgrounds);

  document.getElementById("race-select").onchange = () => showDesc("race");
  document.getElementById("class-select").onchange = () => showDesc("class");
  document.getElementById("background-select").onchange = () => showDesc("bg");

  showDesc("race"); showDesc("class"); showDesc("bg");
}

function showDesc(type) {
  const raceSel = document.getElementById("race-select");
  const classSel = document.getElementById("class-select");
  const bgSel = document.getElementById("background-select");
  if (type === "race") {
    const r = races.find(x => x.name === raceSel.value);
    document.getElementById("race-desc").textContent =
      `${r.desc} Âä†ÂÄº: ${Object.entries(r.bonus).map(([k,v]) => `${k}+${v}`).join(", ")}`;
  } else if (type === "class") {
    const c = classes.find(x => x.name === classSel.value);
    document.getElementById("class-desc").textContent =
      `‰∏ªË¶ÅÂ±ûÊÄß: ${c.main}„ÄÇ${c.desc}`;
  } else if (type === "bg") {
    const b = backgrounds.find(x => x.name === bgSel.value);
    document.getElementById("bg-desc").textContent = b.desc;
  }
}

// ====== ÈöèÊú∫‰∫ã‰ª∂Á≥ªÁªü ======
const events = [
  { name: "ÈÅáÂà∞Âº∫Áõó‰ºèÂáª", dc: 13, related: "ÊïèÊç∑" },
  { name: "Ëß£ËØªÂè§‰ª£Èì≠Êñá", dc: 14, related: "Êô∫Âäõ" },
  { name: "Á©øË∂äÂç±Èô©Âú∞ÂΩ¢", dc: 12, related: "‰ΩìË¥®" },
  { name: "ËØ¥ÊúçÂïÜ‰∫∫Èôç‰ª∑", dc: 11, related: "È≠ÖÂäõ" },
  { name: "‰æ¶ÊµãÈô∑Èò±Êú∫ÂÖ≥", dc: 15, related: "ÊÑüÁü•" },
  { name: "Êé®ÂºÄÊ≤âÈáçÂ∑®Áü≥Èó®", dc: 16, related: "ÂäõÈáè" }
];

function startGame() {
  if (!character.stats) return alert("ËØ∑ÂÖàÈÄâÊã©Â±ûÊÄßÁªÑÔºÅ");
  const race = document.getElementById("race-select").value;
  const cls = document.getElementById("class-select").value;
  const bg = document.getElementById("background-select").value;

  const rdata = races.find(r => r.name === race);
  Object.entries(rdata.bonus).forEach(([k,v]) => character.stats[k]+=v);

  character.race = race;
  character.class = cls;
  character.background = bg;
  character.level = 1;
  character.xp = 0;

  document.getElementById("char-race").textContent = race;
  document.getElementById("char-class").textContent = cls;
  document.getElementById("char-bg").textContent = bg;
  updateStats();

  document.getElementById("character-creation").style.display = "none";
  document.getElementById("game-area").style.display = "block";

  log("Ê∏∏ÊàèÂºÄÂßãÔºÅÊØè20ÁßíËß¶Âèë‰∏Ä‰∏™‰∫ã‰ª∂„ÄÇËØ∑ÁÇπÂáªÊåâÈíÆËøõË°åÈ™∞Â≠êÊ£ÄÂÆö„ÄÇ");
  eventTimer = setInterval(triggerEvent, 20000);
}

function triggerEvent() {
  if (currentEvent) return; // ÈÅøÂÖçÊú™Ëß£ÂÜ≥‰∏ä‰∏Ä‰∏™‰∫ã‰ª∂
  currentEvent = events[Math.floor(Math.random() * events.length)];
  document.getElementById("current-event").textContent =
    `üåÄ ‰∫ã‰ª∂Ôºö${currentEvent.name}ÔºàDC ${currentEvent.dc}, Áõ∏ÂÖ≥Â±ûÊÄßÔºö${currentEvent.related}Ôºâ`;
  document.getElementById("roll-dice").disabled = false;
}

function playerRoll() {
  if (!currentEvent) return;
  const roll = Math.floor(Math.random() * 20) + 1;
  const mod = Math.floor((character.stats[currentEvent.related] - 10) / 2);
  const total = roll + mod;
  log(`‰Ω†Êé∑Âá∫ D20=${roll} (${currentEvent.related}‰øÆÊ≠£ ${mod >= 0 ? "+"+mod : mod}) ‚Üí ÊÄªÂíå ${total}`);

  if (total >= currentEvent.dc) {
    const reward = 20 + Math.floor(Math.random() * 10);
    character.xp += reward;
    log(`‚úÖ ÊàêÂäüÔºÅËé∑Âæó ${reward} ÁªèÈ™å„ÄÇ`);
  } else {
    log(`‚ùå Â§±Ë¥•ÔºÅ‰Ω†Êú™ËÉΩÂÖãÊúçËøôÊ¨°ÊåëÊàò„ÄÇ`);
  }
  updateXP();

  currentEvent = null;
  document.getElementById("current-event").textContent = "Á≠âÂæÖ‰∏ã‰∏Ä‰∏™‰∫ã‰ª∂‚Ä¶‚Ä¶";
  document.getElementById("roll-dice").disabled = true;
}

function updateXP() {
  document.getElementById("xp").textContent = character.xp;
  const needed = character.level * 100;
  if (character.xp >= needed) {
    character.xp -= needed;
    character.level++;
    document.getElementById("level").textContent = character.level;
    log(`üéâ ÂçáÁ∫ßÂà∞ ${character.level} Á∫ßÔºÅ`);
  }
}

function updateStats() {
  document.getElementById("stats").textContent =
    Object.entries(character.stats).map(([k,v]) => `${k}:${v}`).join(", ");
}

function log(msg) {
  const div = document.getElementById("log");
  div.innerHTML += `<div>${msg}</div>`;
  div.scrollTop = div.scrollHeight;
}

// ====== ÂàùÂßãÂåñ ======
document.getElementById("generate").onclick = generateStats;
document.getElementById("start").onclick = startGame;
document.getElementById("roll-dice").onclick = playerRoll;

initSelectors();
